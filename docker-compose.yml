# docker-compose.yml

version: '3.8'

services:
  # --------------------------------------------------------------------------
  # Hadoop NameNode Service
  # --------------------------------------------------------------------------
  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    hostname: namenode
    container_name: namenode
    ports:
      - "9870:9870"
      - "9000:9000"
    volumes:
      - namenode-data:/hadoop/dfs/name
    environment:
      - CLUSTER_NAME=test-cluster
      - HDFS_USER=hdfs
      # The minimal configuration needed for networking to work
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
    env_file:
      - ./hadoop.env
    networks:
      - big-data-net
    healthcheck:
      test: ["CMD", "hdfs", "dfsadmin", "-report"]
      interval: 10s
      timeout: 5s
      retries: 5
    mem_limit: 1g

  # --------------------------------------------------------------------------
  # Hadoop DataNode Service
  # --------------------------------------------------------------------------
  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    hostname: datanode
    container_name: datanode
    volumes:
      - datanode-data:/hadoop/dfs/data
    environment:
      - CLUSTER_NAME=test-cluster
      - HDFS_USER=hdfs
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
    env_file:
      - ./hadoop.env
    networks:
      - big-data-net
    depends_on:
      namenode:
        condition: service_healthy
    mem_limit: 2g

  # --------------------------------------------------------------------------
  # PostgreSQL Service (New Hive Metastore)
  # --------------------------------------------------------------------------
# --------------------------------------------------------------------------
  # PostgreSQL Service (New Hive Metastore)
  # --------------------------------------------------------------------------
  postgres:
    image: postgres:12-alpine
    hostname: postgres
    container_name: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=hiveuser # Must match Hive's username
      - POSTGRES_PASSWORD=hivepassword # Must match Hive's password
      - POSTGRES_DB=hive_metastore # Must match Hive's database
    networks:
      - big-data-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5
    mem_limit: 512m

# --------------------------------------------------------------------------
  # Hive Service (Metastore and HiveServer2)
  # --------------------------------------------------------------------------

  hive-server:
      image: bde2020/hive:2.3.2-postgresql-metastore
      hostname: hive-server
      container_name: hive-server
      ports:
        - "10000:10000"
        - "9083:9083"
      volumes:
        - ./hive-start.sh:/usr/local/bin/hive-start.sh # Mount the script to a standard path in the container
        - ./hive-site.xml:/opt/hive/conf/hive-site.xml # Mount the config file    # The command now executes the script from the container's path
      environment:
        - HIVE_METASTORE_DB_HOST=postgres
        - HIVE_METASTORE_DB_PORT=5432
        - HIVE_METASTORE_DB_USER=hiveuser
        - HIVE_METASTORE_DB_PASSWORD=hivepassword
        - HIVE_METASTORE_DB_NAME=hive_metastore
        - HDFS_USER=hdfs
        - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
      networks:
        - big-data-net
      depends_on:
        namenode:
          condition: service_healthy
        postgres:
          condition: service_healthy
      mem_limit: 2g
      healthcheck:
        test: ["CMD", "nc", "-z", "localhost", "10000"]
        interval: 10s
        timeout: 5s
        retries: 5
      # The command now simply executes the script we created
      command: /usr/local/bin/hive-start.sh


  # --------------------------------------------------------------------------
  # MongoDB Service
  # --------------------------------------------------------------------------
  mongodb:
    image: mongo:6.0
    hostname: mongodb
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb-data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=mongouser
      - MONGO_INITDB_ROOT_PASSWORD=mongopassword
    networks:
      - big-data-net
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')", "--quiet" ]
      interval: 10s
      timeout: 5s
      retries: 5
    mem_limit: 512m

  # --------------------------------------------------------------------------
  # JupyterLab Service
  # --------------------------------------------------------------------------
  jupyterlab:
    image: jupyter/scipy-notebook:latest
    hostname: jupyterlab
    container_name: jupyterlab
    ports:
      - "8888:8888"
    volumes:
      - ./notebooks:/home/jovyan/work
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - GRANT_SUDO=yes
      - NB_UID=1000
      - NB_GID=100
      - HADOOP_NAMENODE_HOST=namenode
      - HIVE_SERVER_HOST=hive-server
      - HIVE_SERVER_PORT=10000
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=hiveuser
      - POSTGRES_PASSWORD=hivepassword
      - MONGODB_HOST=mongodb
      - MONGODB_PORT=27017
      - MONGODB_USER=mongouser
      - MONGODB_PASSWORD=mongopassword
    networks:
      - big-data-net
    depends_on:
      namenode:
        condition: service_healthy
      hive-server:
        condition: service_healthy
      postgres: # Changed dependency from mariadb to postgres
        condition: service_healthy
      mongodb:
        condition: service_healthy
    mem_limit: 1.5g
    command: start-notebook.sh --NotebookApp.token='' --NotebookApp.allow_origin='*'

# --------------------------------------------------------------------------
# Docker Volumes for Persistent Data
# --------------------------------------------------------------------------
volumes:
  namenode-data:
  datanode-data:
  postgres-data: # Changed from mariadb-data
  mongodb-data:

# --------------------------------------------------------------------------
# Docker Network for Inter-Service Communication
# --------------------------------------------------------------------------
networks:
  big-data-net:
    driver: bridge